#include "Filterz.h"



Filterz::Filterz(int Fs)
{
	this->inv_Fs = 1.0 / Fs;
	this->k_2pi__Fs = 2 * M_PI * this->inv_Fs;
	this->mode = linked;
	for (size_t i = 0; i < numberOfBiquads; i++)
	{
		biquads.push_back(Biquad());
	}
	default_values[std::make_pair(equalizer, 0)] = std::make_tuple(bq_type_lowshelf, 200, default_quality, default_attenuation);
	default_values[std::make_pair(equalizer, 1)] = std::make_tuple(bq_type_peak, 1000, default_quality, default_attenuation);
	default_values[std::make_pair(equalizer, 2)] = std::make_tuple(bq_type_peak, 5000, default_quality, default_attenuation);
	default_values[std::make_pair(equalizer, 3)] = std::make_tuple(bq_type_highshelf, 10000, default_quality, default_attenuation);
	default_values[std::make_pair(linked, 0)] = std::make_tuple(bq_type_peak, 200, default_quality, 0.0);
	default_values[std::make_pair(linked, 1)] = std::make_tuple(bq_type_highpass, 200, default_quality, default_attenuation);
	default_values[std::make_pair(linked, 2)] = std::make_tuple(bq_type_lowpass, 200, default_quality, default_attenuation);
	default_values[std::make_pair(linked, 3)] = std::make_tuple(bq_type_peak, 10000, default_quality, 0.0);
}

void Filterz::setMode(int mode)
{
	this->mode = mode;
	this->setDefaults();
}

void Filterz::setDefaults()
{
	for (size_t n = 0; n < numberOfBiquads; n++)
	{
		this->setBiquad(n,
			std::get<1>(default_values[std::make_pair(this->mode, n)]),
			std::get<2>(default_values[std::make_pair(this->mode, n)]),
			std::get<3>(default_values[std::make_pair(this->mode, n)]));
	}
}

void Filterz::setBiquad(int n, double Fc, double Q, double peakGain)
{
	if (n >= numberOfBiquads)
	{
		throw ("'n' must be lower than '%s'", numberOfBiquads);
	}
	if (this->mode == linked)
	{
		if (n == 1)
		{
			F1 = Fc;
			this->Q = Q;
		}
		else if (n == 2) 
		{
			width = Fc;;
		}
		F2 = F1 * width;
		biquads[1].setBiquad(std::get<0>(default_values[std::make_pair(this->mode, 1)]), F1 * this->inv_Fs, this->Q, this->attenuation);
		biquads[2].setBiquad(std::get<0>(default_values[std::make_pair(this->mode, 2)]), F2 * this->inv_Fs, this->Q, this->attenuation);
	} 
	else if (this->mode == equalizer)
	{
		biquads[n].setBiquad(std::get<0>(default_values[std::make_pair(this->mode, n)]), Fc * this->inv_Fs, Q, peakGain);
	}


	//biquads[n].setBiquad(std::get<0>(default_values[std::make_pair(this->mode, n)]), Fc * this->inv_Fs, Q, peakGain);
}

float Filterz::process(float in)
{
	for (size_t n = 0; n < numberOfBiquads; n++)
	{
		in = biquads[n].process(in);
	}
	return in;
}

Path Filterz::get_spectrum(Rectangle<int> offset)
{
	for (size_t n = 0; n < numberOfBiquads; n++)
	{
		this->compute_spectrum(this->biquads[n].getCoefs());
	}
	float x = offset.getTopLeft().getX();
	float y = offset.getCentre().getY();
	spectrum_path.startNewSubPath(x, y + gain * this->spectrum[0]);
	for (size_t i = 1; i < N; i++) {
		x_tmp.setX(x + i);
		x_tmp.setY(y + gain * spectrum[i]);
		spectrum_path.lineTo(x_tmp);
	}
	return spectrum_path;
}

void Filterz::compute_spectrum(std::tuple<double, double, double, double, double> coefs) {
	double w[N] = { 20, 20.135506, 20.27193, 20.4092784, 20.5475573, 20.6867732, 20.8269322, 20.9680409, 21.1101056, 21.2531329, 21.3971292, 21.5421011, 21.6880553, 21.8349983, 21.9829369, 22.1318779, 22.281828, 22.432794, 22.5847829, 22.7378015, 22.8918569, 23.046956, 23.203106, 23.360314, 23.5185871, 23.6779325, 23.8383576, 23.9998696, 24.1624758, 24.3261838, 24.491001, 24.6569348, 24.8239929, 24.9921828, 25.1615123, 25.3319891, 25.5036208, 25.6764155, 25.8503808, 26.0255249, 26.2018556, 26.379381, 26.5581091, 26.7380482, 26.9192065, 27.1015921, 27.2852135, 27.470079, 27.6561969, 27.8435759, 28.0322244, 28.2221511, 28.4133646, 28.6058736, 28.7996869, 28.9948134, 29.1912619, 29.3890414, 29.5881609, 29.7886295, 29.9904564, 30.1936507, 30.3982217, 30.6041787, 30.8115311, 31.0202884, 31.2304601, 31.4420558, 31.6550851, 31.8695577, 32.0854835, 32.3028722, 32.5217338, 32.7420782, 32.9639156, 33.1872559, 33.4121095, 33.6384865, 33.8663973, 34.0958522, 34.3268618, 34.5594365, 34.793587, 35.0293239, 35.266658, 35.5056001, 35.7461612, 35.9883521, 36.2321839, 36.4776677, 36.7248148, 36.9736364, 37.2241438, 37.4763485, 37.7302619, 37.9858957, 38.2432614, 38.5023709, 38.763236, 39.0258685, 39.2902803, 39.5564837, 39.8244907, 40.0943135, 40.3659644, 40.6394558, 40.9148003, 41.1920102, 41.4710984, 41.7520775, 42.0349602, 42.3197596, 42.6064886, 42.8951603, 43.1857878, 43.4783844, 43.7729634, 44.0695382, 44.3681225, 44.6687298, 44.9713737, 45.2760682, 45.5828271, 45.8916643, 46.202594, 46.5156304, 46.8307876, 47.1480802, 47.4675225, 47.7891291, 48.1129147, 48.438894, 48.767082, 49.0974935, 49.4301436, 49.7650476, 50.1022206, 50.4416781, 50.7834355, 51.1275084, 51.4739126, 51.8226637, 52.1737777, 52.5272706, 52.8831585, 53.2414576, 53.6021844, 53.9653552, 54.3309865, 54.6990952, 55.0696978, 55.4428115, 55.818453, 56.1966397, 56.5773887, 56.9607174, 57.3466432, 57.7351838, 58.1263569, 58.5201803, 58.916672, 59.31585, 59.7177326, 60.122338, 60.5296848, 60.9397914, 61.3526767, 61.7683593, 62.1868584, 62.6081929, 63.0323821, 63.4594453, 63.8894019, 64.3222717, 64.7580742, 65.1968295, 65.6385575, 66.0832782, 66.5310122, 66.9817796, 67.4356011, 67.8924974, 68.3524893, 68.8155978, 69.281844, 69.7512492, 70.2238347, 70.6996221, 71.1786331, 71.6608896, 72.1464135, 72.6352269, 73.1273522, 73.6228119, 74.1216284, 74.6238245, 75.1294232, 75.6384474, 76.1509204, 76.6668656, 77.1863065, 77.7092667, 78.2357702, 78.7658408, 79.2995029, 79.8367807, 80.3776987, 80.9222815, 81.4705541, 82.0225414, 82.5782686, 83.137761, 83.7010441, 84.2681436, 84.8390854, 85.4138955, 85.9926001, 86.5752256, 87.1617986, 87.7523458, 88.3468941, 88.9454706, 89.5481027, 90.1548178, 90.7656436, 91.3806078, 91.9997387, 92.6230644, 93.2506132, 93.882414, 94.5184953, 95.1588863, 95.8036161, 96.4527142, 97.1062101, 97.7641336, 98.4265147, 99.0933837, 99.7647709, 100.440707, 101.121223, 101.806349, 102.496118, 103.190559, 103.889706, 104.59359, 105.302243, 106.015697, 106.733985, 107.457139, 108.185193, 108.91818, 109.656133, 110.399086, 111.147073, 111.900128, 112.658284, 113.421578, 114.190043, 114.963714, 115.742628, 116.526819, 117.316323, 118.111176, 118.911414, 119.717074, 120.528193, 121.344808, 122.166955, 122.994673, 123.827998, 124.66697, 125.511626, 126.362004, 127.218145, 128.080085, 128.947866, 129.821526, 130.701106, 131.586645, 132.478184, 133.375763, 134.279423, 135.189207, 136.105154, 137.027307, 137.955708, 138.890399, 139.831422, 140.778822, 141.732641, 142.692921, 143.659709, 144.633046, 145.612978, 146.599549, 147.592805, 148.59279, 149.599551, 150.613132, 151.633581, 152.660944, 153.695267, 154.736598, 155.784985, 156.840475, 157.903116, 158.972956, 160.050046, 161.134432, 162.226166, 163.325297, 164.431874, 165.545949, 166.667573, 167.796795, 168.933668, 170.078244, 171.230575, 172.390713, 173.558712, 174.734624, 175.918503, 177.110403, 178.310379, 179.518485, 180.734776, 181.959308, 183.192137, 184.433318, 185.682909, 186.940966, 188.207547, 189.482709, 190.766511, 192.059011, 193.360268, 194.670341, 195.989291, 197.317177, 198.65406, 200, 201.35506, 202.7193, 204.092784, 205.475573, 206.867732, 208.269322, 209.680409, 211.101056, 212.531329, 213.971292, 215.421011, 216.880553, 218.349983, 219.829369, 221.318779, 222.81828, 224.32794, 225.847829, 227.378015, 228.918569, 230.46956, 232.03106, 233.60314, 235.185871, 236.779325, 238.383576, 239.998696, 241.624758, 243.261838, 244.91001, 246.569348, 248.239929, 249.921828, 251.615123, 253.319891, 255.036208, 256.764155, 258.503808, 260.255249, 262.018556, 263.79381, 265.581091, 267.380482, 269.192065, 271.015921, 272.852135, 274.70079, 276.561969, 278.435759, 280.322244, 282.221511, 284.133646, 286.058736, 287.996869, 289.948134, 291.912619, 293.890414, 295.881609, 297.886295, 299.904564, 301.936507, 303.982217, 306.041787, 308.115311, 310.202884, 312.304601, 314.420558, 316.550851, 318.695577, 320.854835, 323.028722, 325.217338, 327.420782, 329.639156, 331.872559, 334.121095, 336.384865, 338.663973, 340.958522, 343.268618, 345.594365, 347.93587, 350.293239, 352.66658, 355.056001, 357.461612, 359.883521, 362.321839, 364.776677, 367.248148, 369.736364, 372.241438, 374.763485, 377.302619, 379.858957, 382.432614, 385.023709, 387.63236, 390.258685, 392.902803, 395.564837, 398.244907, 400.943135, 403.659644, 406.394558, 409.148003, 411.920102, 414.710984, 417.520775, 420.349602, 423.197596, 426.064886, 428.951603, 431.857878, 434.783844, 437.729634, 440.695382, 443.681225, 446.687298, 449.713737, 452.760682, 455.828271, 458.916643, 462.02594, 465.156304, 468.307876, 471.480802, 474.675225, 477.891291, 481.129147, 484.38894, 487.67082, 490.974935, 494.301436, 497.650476, 501.022206, 504.416781, 507.834355, 511.275084, 514.739126, 518.226637, 521.737777, 525.272706, 528.831585, 532.414576, 536.021844, 539.653552, 543.309865, 546.990952, 550.696978, 554.428115, 558.18453, 561.966397, 565.773887, 569.607174, 573.466432, 577.351838, 581.263569, 585.201803, 589.16672, 593.1585, 597.177326, 601.22338, 605.296848, 609.397914, 613.526767, 617.683593, 621.868584, 626.081929, 630.323821, 634.594453, 638.894019, 643.222717, 647.580742, 651.968295, 656.385575, 660.832782, 665.310122, 669.817796, 674.356011, 678.924974, 683.524893, 688.155978, 692.81844, 697.512492, 702.238347, 706.996221, 711.786331, 716.608896, 721.464135, 726.352269, 731.273522, 736.228119, 741.216284, 746.238245, 751.294232, 756.384474, 761.509204, 766.668656, 771.863065, 777.092667, 782.357702, 787.658408, 792.995029, 798.367807, 803.776987, 809.222815, 814.705541, 820.225414, 825.782686, 831.37761, 837.010441, 842.681436, 848.390854, 854.138955, 859.926001, 865.752256, 871.617986, 877.523458, 883.468941, 889.454706, 895.481027, 901.548178, 907.656436, 913.806078, 919.997387, 926.230644, 932.506132, 938.82414, 945.184953, 951.588863, 958.036161, 964.527142, 971.062101, 977.641336, 984.265147, 990.933837, 997.647709, 1004.40707, 1011.21223, 1018.06349, 1024.96118, 1031.90559, 1038.89706, 1045.9359, 1053.02243, 1060.15697, 1067.33985, 1074.57139, 1081.85193, 1089.1818, 1096.56133, 1103.99086, 1111.47073, 1119.00128, 1126.58284, 1134.21578, 1141.90043, 1149.63714, 1157.42628, 1165.26819, 1173.16323, 1181.11176, 1189.11414, 1197.17074, 1205.28193, 1213.44808, 1221.66955, 1229.94673, 1238.27998, 1246.6697, 1255.11626, 1263.62004, 1272.18145, 1280.80085, 1289.47866, 1298.21526, 1307.01106, 1315.86645, 1324.78184, 1333.75763, 1342.79423, 1351.89207, 1361.05154, 1370.27307, 1379.55708, 1388.90399, 1398.31422, 1407.78822, 1417.32641, 1426.92921, 1436.59709, 1446.33046, 1456.12978, 1465.99549, 1475.92805, 1485.9279, 1495.99551, 1506.13132, 1516.33581, 1526.60944, 1536.95267, 1547.36598, 1557.84985, 1568.40475, 1579.03116, 1589.72956, 1600.50046, 1611.34432, 1622.26166, 1633.25297, 1644.31874, 1655.45949, 1666.67573, 1677.96795, 1689.33668, 1700.78244, 1712.30575, 1723.90713, 1735.58712, 1747.34624, 1759.18503, 1771.10403, 1783.10379, 1795.18485, 1807.34776, 1819.59308, 1831.92137, 1844.33318, 1856.82909, 1869.40966, 1882.07547, 1894.82709, 1907.66511, 1920.59011, 1933.60268, 1946.70341, 1959.89291, 1973.17177, 1986.5406, 2000, 2013.5506, 2027.193, 2040.92784, 2054.75573, 2068.67732, 2082.69322, 2096.80409, 2111.01056, 2125.31329, 2139.71292, 2154.21011, 2168.80553, 2183.49983, 2198.29369, 2213.18779, 2228.1828, 2243.2794, 2258.47829, 2273.78015, 2289.18569, 2304.6956, 2320.3106, 2336.0314, 2351.85871, 2367.79325, 2383.83576, 2399.98696, 2416.24758, 2432.61838, 2449.1001, 2465.69348, 2482.39929, 2499.21828, 2516.15123, 2533.19891, 2550.36208, 2567.64155, 2585.03808, 2602.55249, 2620.18556, 2637.9381, 2655.81091, 2673.80482, 2691.92065, 2710.15921, 2728.52135, 2747.0079, 2765.61969, 2784.35759, 2803.22244, 2822.21511, 2841.33646, 2860.58736, 2879.96869, 2899.48134, 2919.12619, 2938.90414, 2958.81609, 2978.86295, 2999.04564, 3019.36507, 3039.82217, 3060.41787, 3081.15311, 3102.02884, 3123.04601, 3144.20558, 3165.50851, 3186.95577, 3208.54835, 3230.28722, 3252.17338, 3274.20782, 3296.39156, 3318.72559, 3341.21095, 3363.84865, 3386.63973, 3409.58522, 3432.68618, 3455.94365, 3479.3587, 3502.93239, 3526.6658, 3550.56001, 3574.61612, 3598.83521, 3623.21839, 3647.76677, 3672.48148, 3697.36364, 3722.41438, 3747.63485, 3773.02619, 3798.58957, 3824.32614, 3850.23709, 3876.3236, 3902.58685, 3929.02803, 3955.64837, 3982.44907, 4009.43135, 4036.59644, 4063.94558, 4091.48003, 4119.20102, 4147.10984, 4175.20775, 4203.49602, 4231.97596, 4260.64886, 4289.51603, 4318.57878, 4347.83844, 4377.29634, 4406.95382, 4436.81225, 4466.87298, 4497.13737, 4527.60682, 4558.28271, 4589.16643, 4620.2594, 4651.56304, 4683.07876, 4714.80802, 4746.75225, 4778.91291, 4811.29147, 4843.8894, 4876.7082, 4909.74935, 4943.01436, 4976.50476, 5010.22206, 5044.16781, 5078.34355, 5112.75084, 5147.39126, 5182.26637, 5217.37777, 5252.72706, 5288.31585, 5324.14576, 5360.21844, 5396.53552, 5433.09865, 5469.90952, 5506.96978, 5544.28115, 5581.8453, 5619.66397, 5657.73887, 5696.07174, 5734.66432, 5773.51838, 5812.63569, 5852.01803, 5891.6672, 5931.585, 5971.77326, 6012.2338, 6052.96848, 6093.97914, 6135.26767, 6176.83593, 6218.68584, 6260.81929, 6303.23821, 6345.94453, 6388.94019, 6432.22717, 6475.80742, 6519.68295, 6563.85575, 6608.32782, 6653.10122, 6698.17796, 6743.56011, 6789.24974, 6835.24893, 6881.55978, 6928.1844, 6975.12492, 7022.38347, 7069.96221, 7117.86331, 7166.08896, 7214.64135, 7263.52269, 7312.73522, 7362.28119, 7412.16284, 7462.38245, 7512.94232, 7563.84474, 7615.09204, 7666.68656, 7718.63065, 7770.92667, 7823.57702, 7876.58408, 7929.95029, 7983.67807, 8037.76987, 8092.22815, 8147.05541, 8202.25414, 8257.82686, 8313.7761, 8370.10441, 8426.81436, 8483.90854, 8541.38955, 8599.26001, 8657.52256, 8716.17986, 8775.23458, 8834.68941, 8894.54706, 8954.81027, 9015.48178, 9076.56436, 9138.06078, 9199.97387, 9262.30644, 9325.06132, 9388.2414, 9451.84953, 9515.88863, 9580.36161, 9645.27142, 9710.62101, 9776.41336, 9842.65147, 9909.33837, 9976.47709, 10044.0707, 10112.1223, 10180.6349, 10249.6118, 10319.0559, 10388.9706, 10459.359, 10530.2243, 10601.5697, 10673.3985, 10745.7139, 10818.5193, 10891.818, 10965.6133, 11039.9086, 11114.7073, 11190.0128, 11265.8284, 11342.1578, 11419.0043, 11496.3714, 11574.2628, 11652.6819, 11731.6323, 11811.1176, 11891.1414, 11971.7074, 12052.8193, 12134.4808, 12216.6955, 12299.4673, 12382.7998, 12466.697, 12551.1626, 12636.2004, 12721.8145, 12808.0085, 12894.7866, 12982.1526, 13070.1106, 13158.6645, 13247.8184, 13337.5763, 13427.9423, 13518.9207, 13610.5154, 13702.7307, 13795.5708, 13889.0399, 13983.1422, 14077.8822, 14173.2641, 14269.2921, 14365.9709, 14463.3046, 14561.2978, 14659.9549, 14759.2805, 14859.279, 14959.9551, 15061.3132, 15163.3581, 15266.0944, 15369.5267, 15473.6598, 15578.4985, 15684.0475, 15790.3116, 15897.2956, 16005.0046, 16113.4432, 16222.6166, 16332.5297, 16443.1874, 16554.5949, 16666.7573, 16779.6795, 16893.3668, 17007.8244, 17123.0575, 17239.0713, 17355.8712, 17473.4624, 17591.8503, 17711.0403, 17831.0379, 17951.8485, 18073.4776, 18195.9308, 18319.2137, 18443.3318, 18568.2909, 18694.0966, 18820.7547, 18948.2709, 19076.6511, 19205.9011, 19336.0268, 19467.0341, 19598.9291, 19731.7177, 19865.406, 20000 };
	double num[filter_order] = { std::get<2>(coefs),std::get<3>(coefs), std::get<4>(coefs) };
	double den[filter_order] = { 1, std::get<0>(coefs), std::get<1>(coefs) };
	std::complex<double> ci(0, 1);
	double x;
	this->spectrum[N] = { 0 };
	for (size_t i = 0; i < N; i++)
	{
		this->spectrum[i] += -20 * log10(std::abs(polyval(num, filter_order, std::exp(ci * this->k_2pi__Fs * this->freqVec.get_element(i))) / polyval(den, filter_order, std::exp(ci * k_2pi__Fs * this->freqVec.get_element(i)))));
	}
}

std::complex<double> Filterz::polyval(double *p, int n, std::complex<double> x)
{
	if (n < 1) {
		throw ("filter order must be higher than 0 ", numberOfBiquads);
	}
	std::complex<double> y = p[0];
	for (size_t i = 1; i < n; i++)
	{
		y = x * y + p[i];
	}
	return y;
}

Filterz::~Filterz()
{
}

